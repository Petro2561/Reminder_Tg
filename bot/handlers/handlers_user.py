from datetime import datetime
from io import BytesIO
from sre_parse import State
from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ContentType
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


from ai.chat_gpt import PROMPT_FIRST, generate_reminder_response, manage_audio
from bot.states import FillText, TimezoneStates
from db.db import DBUser, Reminder, User
from db.repositories.general import Repository
from db.uow import UoW

START_MESSAGE = """<b>–ü—Ä–∏–≤–µ—Ç, {name}!</b> 
ü§ñ–Ø AI-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–æ—Ä‚è∞.

–ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∫–æ–≥–¥–∞ –∏ –æ —á–µ–º –í–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å. üéôÔ∏èüí¨

–ù–∞–ø—Ä–∏–º–µ—Ä: 
-–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –≤ 11 –Ω–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É.
-–í —Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É –Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —à–∫–æ–ª—É.
-–°–µ–≥–æ–¥–Ω—è –≤ 22.00 –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É—Ç–±–æ–ª.
-–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11-00 –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—á—Ç—É.

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º, —Ç–∞–∫ –∏ –≥–æ–ª–æ—Å–æ–º. üé§üí¨

üï∞Ô∏è –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: UTC+3

üí° –ñ–¥—É –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!
"""

router = Router()

@router.message(Command("set_timezone"))
async def cmd_set_time(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC:",
        reply_markup=get_timezone_keyboard()
    )
    await state.set_state(TimezoneStates.waiting_for_timezone)

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, user: User | None = None):
    await message.answer(START_MESSAGE.format(name=user.first_name), parse_mode="HTML")
    await state.set_state(state=FillText.fill_text)


@router.message(StateFilter(FillText.fill_text), F.content_type == ContentType.VOICE)
async def fill_audio(message: Message, state: FSMContext, uow: UoW, user: DBUser):
    file_info = await message.bot.get_file(message.voice.file_id)
    file_bytes = BytesIO()
    await message.bot.download(file_info, file_bytes)
    file_bytes.seek(0) 
    text_message = await manage_audio(file_bytes)
    await message.answer(text_message)
    await gpt_answer(message=message, text_message=text_message, uow=uow, user=user)

@router.message(StateFilter(FillText.fill_text))
async def fill_text(message: Message, state: FSMContext, uow: UoW, user: DBUser):
    await gpt_answer(message=message, text_message=message.text, uow=uow, user=user)


async def gpt_answer(message: Message, text_message: str, uow: UoW, user: DBUser):
    response = await generate_reminder_response(prompt=PROMPT_FIRST.format(datetime=datetime.now()), user_input=text_message)
    if isinstance(response, dict):
        days_of_week = response.get('–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏', [])
        if isinstance(days_of_week, str):
            days_of_week = [days_of_week]

        reminders = []
        if days_of_week:
            for day in days_of_week:
                reminder = Reminder.from_gpt(
                    from_gpt={**response, '–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏': day},  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    user=user
                )
                await uow.commit(reminder)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                reminders.append(reminder)
        else:
            reminder = Reminder.from_gpt(from_gpt=response, user=user)
            await uow.commit(reminder)
            reminders.append(reminder)
        

        repeat_day = response.get('–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏')
        repeat_type = response.get('—Ç–∏–ø_–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è', '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ')
        message_text = (
            f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b>\n\n"
            f"–í—Ä–µ–º—è: {response['–≤—Ä–µ–º—è']}\n"
            f"–°–æ–±—ã—Ç–∏–µ: {response['—Å–æ–±—ã—Ç–∏–µ']}\n"
        )

        if response.get('–¥–∞—Ç–∞'):
            message_text += f"–î–∞—Ç–∞: {response['–¥–∞—Ç–∞']}\n"
        else:
            if repeat_type == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
                message_text += "–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            elif repeat_type == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" and repeat_day:
                if isinstance(repeat_day, list):
                    days = ', '.join(repeat_day)  # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
                    message_text += f"–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è: {days}\n"
                else:
                    message_text += f"–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è: {repeat_day}\n"
        message_text += f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: UTC{user.utc_offset:+}\n"
        await message.answer(message_text, parse_mode="HTML")
    else:
        await message.answer(response)
    


    
def create_inline_kb(width: int, *args: str) -> InlineKeyboardMarkup:
    kb_builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(text=button, callback_data=f"set_timezone:{button}") for button in args
    ]
    kb_builder.row(*buttons, width=width)
    return kb_builder.as_markup()

def get_timezone_keyboard() -> InlineKeyboardMarkup:
    timezones = [
        'UTC-12', 'UTC-11', 'UTC-10', 'UTC-9', 'UTC-8',
        'UTC-7', 'UTC-6', 'UTC-5', 'UTC-4', 'UTC-3',
        'UTC-2', 'UTC-1', 'UTC+0', 'UTC+1', 'UTC+2',
        'UTC+3', 'UTC+4', 'UTC+5', 'UTC+6', 'UTC+7',
        'UTC+8', 'UTC+9', 'UTC+10', 'UTC+11', 'UTC+12'
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∏—Ä–∏–Ω–æ–π 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    return create_inline_kb(3, *timezones)


@router.callback_query(TimezoneStates.waiting_for_timezone, lambda c: c.data.startswith("set_timezone:"))
async def process_timezone_selection(callback_query: CallbackQuery, state: FSMContext, user: DBUser, uow: UoW):
    offset_str = callback_query.data.split(":")[1]
    offset = int(offset_str.replace("UTC", ""))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
    user.utc_offset = offset
    await uow.commit(user)
    await callback_query.message.answer(f"–í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: UTC{offset:+}")
    await state.set_state(state=FillText.fill_text)